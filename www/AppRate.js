// Generated by CoffeeScript 1.8.0
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */;
var AppRate, exec, locales;

locales = require('./locales');

exec = require('cordova/exec');

AppRate = (function() {
  var FLAG_NATIVE_CODE_SUPPORTED, LOCALE_DEFAULT, LOCAL_STORAGE_APP_VERSION, LOCAL_STORAGE_COUNTER, counter, getLocaleObject, localStorageParam, navigateToAppStore, promptForRatingWindowButtonClickHandler, showDialog, updateCounter;

  function AppRate() {}

  LOCAL_STORAGE_APP_VERSION = 'appVersion';

  LOCAL_STORAGE_COUNTER = 'counter';

  LOCALE_DEFAULT = 'en';

  FLAG_NATIVE_CODE_SUPPORTED = /(iPhone|iPod|iPad|Android)/i.test(navigator.userAgent.toLowerCase());

  counter = {
    appVersion: void 0,
    countdown: 0
  };

  navigateToAppStore = function() {
    if (/(iPhone|iPod|iPad)/i.test(navigator.userAgent.toLowerCase())) {
      window.open(this.preferences.storeAppURL.ios, '_system');
    } else if (/(Android)/i.test(navigator.userAgent.toLowerCase())) {
      window.open(this.preferences.storeAppURL.android, '_system');
    } else if (/(BlackBerry)/i.test(navigator.userAgent.toLowerCase())) {
      window.open(this.preferences.storeAppURL.blackberry);
    }
    return this;
  };

  getLocaleObject = function() {
    var displayAppName, key, localeObj, value;
    localeObj = AppRate.preferences.customLocale || locales[AppRate.preferences.useLanguage] || locales[LOCALE_DEFAULT];
    displayAppName = localeObj.displayAppName || AppRate.preferences.displayAppName;
    for (key in localeObj) {
      value = localeObj[key];
      if (typeof value === 'string' || value instanceof String) {
        localeObj[key] = value.replace(/%@/g, displayAppName);
      }
    }
    return localeObj;
  };

  promptForRatingWindowButtonClickHandler = function(buttonIndex) {
    switch (buttonIndex) {
      case 2:
        updateCounter('reset');
        break;
      case 1:
      case 3:
        updateCounter('stop');
    }
    return AppRate.onButtonClicked(buttonIndex);
  };


  /*
  @nodoc
  constructor: ->
    @getAppVersion (success) =>
      AppRate.preferences.curentVersion = success
      if /(iPhone|iPod|iPad)/i.test navigator.userAgent.toLowerCase() and (window.localStorage.getItem "appVersion") isnt success
        AppRate.preferences.curentVersion = success
  
        rate_stop()
        rate_reset()
  
        window.localStorage.setItem 'appVersion', success
        window.localStorage.removeItem 'rate_app'
  
      AppRate.rate_app = parseInt window.localStorage.getItem("rate_app") or 1
      AppRate.usesUntilPromptCounter = parseInt window.localStorage.getItem("usesUntilPromptCounter") or 0
  
    @getAppTitle (success) ->
      AppRate.preferences.displayAppName = success
    @
  
  navigateToAppStore = ->
    if /(iPhone|iPod|iPad)/i.test navigator.userAgent.toLowerCase()
      window.open AppRate.preferences.appStoreAppURL.ios, '_system'
    else if /(Android)/i.test navigator.userAgent.toLowerCase()
      window.open AppRate.preferences.appStoreAppURL.android, '_system'
    else if /(BlackBerry)/i.test navigator.userAgent.toLowerCase()
      window.open AppRate.preferences.appStoreAppURL.blackberry
    @
  
  promptForRatingWindowButtonClickHandler = (buttonIndex) ->
     * no = 1, later = 2, yes = 3
    switch buttonIndex
      when 3
        rate_stop()
        setTimeout navigateToAppStore, 100
      when 2 then rate_reset()
      when 1 then rate_stop()
    @
  
  rate_stop = ->
    window.localStorage.setItem "rate_app", 0
    window.localStorage.removeItem "usesUntilPromptCounter"
    @
  
  rate_reset = ->
    window.localStorage.setItem "usesUntilPromptCounter", 0
    @
  
  rate_try = ->
    localeObj = getLocaleObject()
    if thisObj.usesUntilPromptCounter is AppRate.preferences.usesUntilPrompt and thisObj.rate_app isnt 0
      navigator.notification.confirm localeObj.message, promptForRatingWindowButtonClickHandler, localeObj.title, [localeObj.cancelButtonLabel, localeObj.laterButtonLabel, localeObj.rateButtonLabel]
    else if thisObj.usesUntilPromptCounter < AppRate.preferences.usesUntilPrompt
      thisObj.usesUntilPromptCounter++
      window.localStorage.setItem "usesUntilPromptCounter", thisObj.usesUntilPromptCounter
    @
  
  getLocaleObject = ->
    localeObj = AppRate.preferences.customLocale or locales[AppRate.preferences.useLanguage] or locales["en"]
    displayAppName = localeObj.displayAppName or AppRate.preferences.displayAppName
    for key, value of localeObj
      if typeof value == 'string' or value instanceof String
        localeObj[key] = value.replace(/%@/g, displayAppName)
    localeObj
  
  
  setup: (prefs) ->
    AppRate.preferences.debug = true if prefs.debug isnt undefined
    if prefs.useLanguage isnt undefined
      AppRate.preferences.autoDetectLanguage = false
      AppRate.preferences.useLanguage = prefs.useLanguage
    AppRate.preferences.customLocale = prefs.customLocale if prefs.customLocale isnt undefined
    AppRate.preferences.usesUntilPrompt = prefs.usesUntilPrompt if prefs.usesUntilPrompt isnt undefined
    AppRate.preferences.displayAppName = prefs.displayAppName if prefs.displayAppName isnt undefined
    if prefs.appStoreAppURL
      AppRate.preferences.appStoreAppURL.ios = prefs.appStoreAppURL.ios if prefs.appStoreAppURL.ios isnt undefined
      AppRate.preferences.appStoreAppURL.android = prefs.appStoreAppURL.android if prefs.appStoreAppURL.android isnt undefined
      AppRate.preferences.appStoreAppURL.blackberry = prefs.appStoreAppURL.blackberry if prefs.appStoreAppURL.blackberry isnt undefined
    @
  
  promptForRating: ->
    if navigator.notification and navigator.globalization
      if AppRate.preferences.autoDetectLanguage
        navigator.globalization.getPreferredLanguage (language) ->
          AppRate.preferences.useLanguage = language.value.split(/_/)[0]
          rate_try()
        , ->
          rate_try()
      else
        rate_try()
    @
   */

  updateCounter = function(action) {
    if (action == null) {
      action = 'increment';
    }
    switch (action) {
      case 'increment':
        if (counter.countdown <= AppRate.preferences.usesUntilPrompt) {
          counter.countdown++;
        }
        break;
      case 'reset':
        counter.countdown = 0;
        break;
      case 'stop':
        counter.countdown = AppRate.preferences.usesUntilPrompt + 1;
    }
    localStorageParam(LOCAL_STORAGE_COUNTER, JSON.stringify(counter));
    return counter;
  };

  showDialog = function() {
    var localeObj;
    if (counter.countdown <= AppRate.preferences.usesUntilPrompt) {
      localeObj = getLocaleObject();
      navigator.notification.confirm(localeObj.message, promptForRatingWindowButtonClickHandler, localeObj.title, [localeObj.cancelButtonLabel, localeObj.laterButtonLabel, localeObj.rateButtonLabel]);
    }
    return AppRate;
  };

  localStorageParam = function(itemName, itemValue, action) {
    if (itemValue == null) {
      itemValue = null;
    }
    if (action == null) {
      action = false;
    }
    if (itemValue !== null) {
      action = true;
    }
    switch (action) {
      case true:
        return localStorage.setItem(itemName, itemValue);
      case false:
        return localStorage.getItem(itemName);
      case null:
        return localStorage.removeItem(itemName);
    }
  };

  AppRate.preferences = {
    useLanguage: null,
    displayAppName: '',
    currentVersion: null,
    promptAgainForEachNewVersion: true,
    usesUntilPrompt: 3,
    storeAppURL: {
      ios: void 0,
      android: void 0,
      blackberry: void 0
    },
    customLocale: {
      title: "Rate %@",
      message: "If you enjoy using %@, would you mind taking a moment to rate it? It wonâ€™t take more than a minute. Thanks for your support!",
      cancelButtonLabel: "No, Thanks",
      laterButtonLabel: "Remind Me Later",
      rateButtonLabel: "Rate It Now"
    }
  };

  AppRate.init = function() {
    counter = JSON.parse(localStorageParam(LOCAL_STORAGE_COUNTER)) || counter;
    this.getAppVersion((function(_this) {
      return function(currentVersion) {
        if (_this.preferences.currentVersion !== currentVersion) {
          _this.preferences.currentVersion = currentVersion;
          localStorageParam(LOCAL_STORAGE_APP_VERSION, currentVersion);
        }
        return _this;
      };
    })(this));
    this.getAppTitle((function(_this) {
      return function(displayAppName) {
        _this.preferences.displayAppName = displayAppName;
        return _this;
      };
    })(this));
    return this;
  };

  AppRate.promptForRating = function() {
    this.preferences.currentVersion = localStorageParam(LOCAL_STORAGE_APP_VERSION);
    updateCounter();
    if (this.preferences.useLanguage === null) {
      navigator.globalization.getPreferredLanguage((function(_this) {
        return function(language) {
          _this.preferences.useLanguage = language.value.split(/-/)[0];
          return showDialog();
        };
      })(this));
    } else {
      showDialog();
    }
    return this;
  };

  AppRate.getAppVersion = function(successCallback, errorCallback) {
    if (FLAG_NATIVE_CODE_SUPPORTED) {
      exec(successCallback, errorCallback, 'AppRate', 'getAppVersion', []);
    } else {
      successCallback(localStorageParam(LOCAL_STORAGE_APP_VERSION));
    }
    return this;
  };

  AppRate.getAppTitle = function(successCallback, errorCallback) {
    if (FLAG_NATIVE_CODE_SUPPORTED) {
      exec(successCallback, errorCallback, 'AppRate', 'getAppTitle', []);
    } else {
      successCallback(this.preferences.displayAppName);
    }
    return this;
  };

  AppRate.onButtonClicked = function(buttonIndex) {
    console.log("onButtonClicked->" + buttonIndex);
    return this;
  };

  return AppRate;

})();

AppRate.init();

module.exports = AppRate;
